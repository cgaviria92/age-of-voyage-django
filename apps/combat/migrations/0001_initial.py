# Generated by Django 5.1.1 on 2025-09-02 23:33

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AmmunitionType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("round_shot", "Round Shot"),
                            ("chain_shot", "Chain Shot"),
                            ("grape_shot", "Grape Shot"),
                            ("incendiary", "Incendiary Shot"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("hull_damage", models.PositiveIntegerField(default=10)),
                ("sail_damage", models.PositiveIntegerField(default=0)),
                ("crew_damage", models.PositiveIntegerField(default=0)),
                (
                    "fire_chance",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                ("gold_cost", models.PositiveIntegerField()),
                ("iron_cost", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Ammunition Type",
                "verbose_name_plural": "Ammunition Types",
                "db_table": "combat_ammunitiontype",
            },
        ),
        migrations.CreateModel(
            name="Battle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "battle_type",
                    models.CharField(
                        choices=[
                            ("pirate_encounter", "Pirate Encounter"),
                            ("player_vs_player", "Player vs Player"),
                            ("faction_battle", "Faction Battle"),
                            ("boss_battle", "Boss Battle"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("preparing", "Preparing"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("fled", "Player Fled"),
                        ],
                        default="preparing",
                        max_length=20,
                    ),
                ),
                ("weather_condition", models.CharField(default="Clear", max_length=50)),
                (
                    "visibility",
                    models.PositiveIntegerField(
                        default=100,
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                ("current_turn", models.PositiveIntegerField(default=1)),
                ("player_turn", models.BooleanField(default=True)),
                ("player_initial_health", models.PositiveIntegerField()),
                ("player_current_health", models.PositiveIntegerField()),
                ("player_ammunition_used", models.PositiveIntegerField(default=0)),
                ("enemy_initial_health", models.PositiveIntegerField()),
                ("enemy_current_health", models.PositiveIntegerField()),
                ("winner", models.CharField(blank=True, max_length=20)),
                ("experience_gained", models.PositiveIntegerField(default=0)),
                ("loot_gained", models.JSONField(default=dict)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Battle",
                "verbose_name_plural": "Battles",
                "db_table": "combat_battle",
            },
        ),
        migrations.CreateModel(
            name="BattleEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("turn_triggered", models.PositiveIntegerField()),
                ("effects_applied", models.JSONField(default=dict)),
            ],
            options={
                "verbose_name": "Battle Event",
                "verbose_name_plural": "Battle Events",
                "db_table": "combat_battleevent",
            },
        ),
        migrations.CreateModel(
            name="BattleTurn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("turn_number", models.PositiveIntegerField()),
                ("is_player_turn", models.BooleanField()),
                ("target_ship", models.CharField(blank=True, max_length=100)),
                ("action_successful", models.BooleanField()),
                ("damage_dealt", models.PositiveIntegerField(default=0)),
                ("damage_received", models.PositiveIntegerField(default=0)),
                (
                    "special_effects",
                    models.JSONField(
                        default=dict, help_text="Fire, critical hits, etc."
                    ),
                ),
                ("description", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Battle Turn",
                "verbose_name_plural": "Battle Turns",
                "db_table": "combat_battleturn",
            },
        ),
        migrations.CreateModel(
            name="CombatAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("attack", "Direct Attack"),
                            ("defensive", "Defensive Maneuver"),
                            ("special", "Special Action"),
                            ("flee", "Attempt to Flee"),
                            ("board", "Boarding Action"),
                            ("repair", "Emergency Repair"),
                            ("reload", "Reload Weapons"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "damage_multiplier",
                    models.DecimalField(decimal_places=2, default=1.0, max_digits=4),
                ),
                ("defense_bonus", models.IntegerField(default=0)),
                ("speed_bonus", models.IntegerField(default=0)),
                ("accuracy_modifier", models.IntegerField(default=0)),
                ("required_ammunition", models.PositiveIntegerField(default=0)),
                ("required_crew_morale", models.PositiveIntegerField(default=0)),
                ("required_ship_condition", models.PositiveIntegerField(default=0)),
                ("cooldown_turns", models.PositiveIntegerField(default=0)),
                (
                    "base_success_rate",
                    models.PositiveIntegerField(
                        default=75,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Combat Action",
                "verbose_name_plural": "Combat Actions",
                "db_table": "combat_combataction",
            },
        ),
        migrations.CreateModel(
            name="CombatEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("weather", "Weather Change"),
                            ("reinforcement", "Reinforcements Arrive"),
                            ("equipment_failure", "Equipment Failure"),
                            ("crew_event", "Crew Event"),
                            ("environmental", "Environmental Hazard"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "trigger_chance",
                    models.PositiveIntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("min_turn", models.PositiveIntegerField(default=1)),
                ("max_turn", models.PositiveIntegerField(default=20)),
                (
                    "effects",
                    models.JSONField(
                        default=dict, help_text="JSON describing the event effects"
                    ),
                ),
            ],
            options={
                "verbose_name": "Combat Event",
                "verbose_name_plural": "Combat Events",
                "db_table": "combat_combatevent",
            },
        ),
        migrations.CreateModel(
            name="PirateFleet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "fleet_type",
                    models.CharField(
                        choices=[
                            ("patrol", "Patrol Squadron"),
                            ("merchant_hunter", "Merchant Hunter"),
                            ("warship", "Warship"),
                            ("flagship", "Pirate Flagship"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "difficulty",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Novice"),
                            (2, "Experienced"),
                            (3, "Veteran"),
                            (4, "Elite"),
                            (5, "Legendary"),
                        ]
                    ),
                ),
                (
                    "ship_types",
                    models.JSONField(
                        default=list, help_text="List of ship types in the fleet"
                    ),
                ),
                ("total_ships", models.PositiveIntegerField(default=1)),
                ("total_health", models.PositiveIntegerField()),
                ("total_attack", models.PositiveIntegerField()),
                ("total_defense", models.PositiveIntegerField()),
                ("fleet_speed", models.PositiveIntegerField()),
                (
                    "aggression",
                    models.PositiveIntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "tactical_intelligence",
                    models.PositiveIntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("gold_reward", models.PositiveIntegerField()),
                ("experience_reward", models.PositiveIntegerField()),
                (
                    "special_loot",
                    models.JSONField(
                        default=dict, help_text="Special items and resources"
                    ),
                ),
                (
                    "spawn_chance",
                    models.PositiveIntegerField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Pirate Fleet",
                "verbose_name_plural": "Pirate Fleets",
                "db_table": "combat_piratefleet",
            },
        ),
    ]
